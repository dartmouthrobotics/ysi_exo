#!/usr/bin/env python
"""ROS node to publish EXO sonde measurements."""

import rospy

from ysi_exo.default_values import *
from ysi_exo.parameter_codes import *
from ysi_exo.utilities import convert_date_to_epoch
from ysi_exo.msg import Sonde

RATE = 1.0
SONDE_LINK = "sonde"
USE_TIMESTAMP_FROM_SONDE = 1 # 1: use timestamp from sonde, 0: use timestamp from ROS
SYNC_TIMESTAMP = 1 # 1: sync timestamp of sonde with pc; 0: don't sync.

def sonde_node():
    """ROS node to publish EXO sonde measurements."""
    # ROS nitialization and parameters.
    rospy.init_node('sonde_driver', anonymous=False)
    rospy.sleep(1)

    dcp_version = rospy.get_param('~dcp_version', DCP_V1)
    serial_port = rospy.get_param('~serial_port', SERIAL_PORT)
    baudrate = rospy.get_param('~baudrate', BAUDRATE)
    frame_id = rospy.get_param('~sonde_frame', SONDE_LINK)

    stamp_from_rostime = bool(rospy.get_param('~stamp_from_rostime', 'False'))

    # Initialization of the serial port.
    if dcp_version == DCP_V1:
        import ysi_exo.dcp1
        address = rospy.get_param('~address', ysi_exo.dcp1.Dcp1.ADDRESS)
        sonde = ysi_exo.dcp1.Dcp1(serial_port=serial_port, baudrate=baudrate,
                address=address)
    elif dcp_version == DCP_V2:
        import ysi_exo.dcp2
        sonde = ysi_exo.dcp2.Dcp2(serial_port=serial_port, baudrate=baudrate)
        sync_timestamp = rospy.get_param('~sync_timestamp', SYNC_TIMESTAMP)
        if sync_timestamp:
            sonde.set_time(rospy.get_time())
    elif dcp_version == EXO_CSV:
        import ysi_exo.exo_csv_reader
        csv_file_path = rospy.get_param('~csv_file_path')
        sonde = ysi_exo.exo_csv_reader.ExoCsvReader(csv_file_path)
    else:
        sonde = None

    rospy.loginfo("Sonde initialized.")

    if not (sonde is None):
        # Initialization of the publisher.
        pub = rospy.Publisher('sonde', Sonde, queue_size=10, latch=True)
        sonde_msg = Sonde()
        sonde_msg.header.frame_id = frame_id
        rate = rospy.Rate(RATE) # 1hz
        out = sonde.read_data()

        temp_dictionary = {}
        sonde_msg.parameters = sonde.parameters

        # Set the boolean to use specific time.
        if stamp_from_rostime:
            stamp_from_sonde = False
        elif sonde.date_index != -1 and sonde.time_index != -1:
            stamp_from_sonde = True
        else:
            stamp_from_sonde = False

        while not rospy.is_shutdown():
            # Reading and publishing.
            
            try:
                #readstart = rospy.Time.now()
                sonde.read_data()
                #readduration = rospy.Time.now() - readstart
                #rospy.loginfo('Finished read. Took %.3f sec.' % readduration.to_sec())
            except RuntimeWarning:
                rate.sleep()
                continue

            if stamp_from_sonde:
                # timestamp from sonde
                stamp = rospy.Time(convert_date_to_epoch(
                    sonde.data[sonde.date_index],
                    sonde.data[sonde.time_index], 
                    sonde.parameters[sonde.date_index]))
            else:
                #stamp = rospy.get_time()
                stamp = rospy.Time.now()

            sonde_msg.header.stamp = stamp

            sonde_msg.data = sonde.data 

            pub.publish(sonde_msg)
            rate.sleep()

if __name__ == '__main__':
    try:
        sonde_node()
    except rospy.ROSInterruptException:
        pass
